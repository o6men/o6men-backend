"""new_revision

Revision ID: 1c66b8f5e341
Revises: 
Create Date: 2025-02-18 23:54:28.246102

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '1c66b8f5e341'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('currency',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('code', sa.String(), nullable=False),
    sa.Column('symbol', sa.String(), nullable=False),
    sa.Column('rate', sa.Float(), nullable=True),
    sa.Column('percent', sa.Float(), nullable=False),
    sa.Column('min_amount', sa.Float(), nullable=False),
    sa.Column('commission_step', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('file',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('path', sa.String(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('user_table',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=True),
    sa.Column('two_fa', sa.Boolean(), nullable=False),
    sa.Column('tg_user_id', sa.BigInteger(), nullable=True),
    sa.Column('tg_username', sa.String(), nullable=True),
    sa.Column('role', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('registered_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('photo_url', sa.String(), nullable=True),
    sa.Column('tether_balance', sa.Float(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('tg_user_id'),
    sa.UniqueConstraint('tg_username')
    )
    op.create_table('activeapplication',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_pk', sa.Integer(), nullable=False),
    sa.Column('datetime', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('type', sa.Enum('topup', 'payout', native_enum=False), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('currency', sa.Enum('tether', native_enum=False), nullable=False),
    sa.Column('expired_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_pk'], ['user_table.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pattern',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_pk', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['user_pk'], ['user_table.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tgauthtoken',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_pk', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('end_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('token', sa.String(), nullable=False),
    sa.ForeignKeyConstraint(['user_pk'], ['user_table.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token')
    )
    op.create_table('topup',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_pk', sa.Integer(), nullable=False),
    sa.Column('datetime', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('transaction_hash', sa.String(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('amount_in_usd', sa.Float(), nullable=False),
    sa.Column('pre_balance', sa.Float(), nullable=False),
    sa.Column('post_balance', sa.Float(), nullable=False),
    sa.ForeignKeyConstraint(['user_pk'], ['user_table.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('withdraw',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('user_pk', sa.Integer(), nullable=False),
    sa.Column('phone', sa.String(), nullable=False),
    sa.Column('card', sa.String(), nullable=False),
    sa.Column('receiver', sa.String(), nullable=False),
    sa.Column('bank', sa.String(), nullable=False),
    sa.Column('currency', sa.String(), nullable=False),
    sa.Column('comment', sa.String(), nullable=False),
    sa.Column('amount', sa.Float(), nullable=False),
    sa.Column('amount_in_usd', sa.Float(), nullable=False),
    sa.Column('tag', sa.String(), nullable=True),
    sa.Column('status', sa.Enum('completed', 'waiting', 'reject', native_enum=False), nullable=False),
    sa.Column('datetime', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['user_pk'], ['user_table.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('patternfield',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pattern_pk', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('card', sa.String(), nullable=False),
    sa.Column('phone', sa.String(), nullable=False),
    sa.Column('receiver', sa.String(), nullable=True),
    sa.Column('bank', sa.String(), nullable=False),
    sa.Column('amount', sa.String(), nullable=False),
    sa.Column('currency', sa.String(), nullable=False),
    sa.Column('comment', sa.String(), nullable=True),
    sa.ForeignKeyConstraint(['pattern_pk'], ['pattern.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('patternfield')
    op.drop_table('withdraw')
    op.drop_table('topup')
    op.drop_table('tgauthtoken')
    op.drop_table('pattern')
    op.drop_table('activeapplication')
    op.drop_table('user_table')
    op.drop_table('file')
    op.drop_table('currency')
    # ### end Alembic commands ###
